@prefix ub: <http://swat.cse.lehigh.edu/onto/univ-bench.owl#>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LUBM QUERIES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Query1
% This query bears large input and high selectivity. It queries about just one class and
% one property and does not assume any hierarchy information or inference.
[Q1] ?(X) :- 
  ub:GraduateStudent(X), 
  ub:takesCourse(X, <http://www.Department0.University0.edu/GraduateCourse0>).

% Query2
% This query increases in complexity: 3 classes and 3 properties are involved. Additionally, 
% there is a triangular pattern of relationships between the objects involved.
[Q2] ?(X, Y, Z) :- 
  ub:GraduateStudent(X), 
  ub:University(Y), 
  ub:Department(Z),
  ub:memberOf(X, Z),
  ub:subOrganizationOf(Z, Y),
  ub:undergraduateDegreeFrom(X, Y).

% Query3
% This query is similar to Query 1 but class Publication has a wide hierarchy.
[Q3] ?(X) :-
  ub:Publication(X),
  ub:publicationAuthor(X, <http://www.Department0.University0.edu/AssistantProfessor0>).

% Query4
% This query has small input and high selectivity. It assumes subClassOf relationship 
% between Professor and its subclasses. Class Professor has a wide hierarchy. Another 
% feature is that it queries about multiple properties of a single class.
[Q4] ?(X, Y1, Y2, Y3) :-
  ub:Professor(X),
  ub:worksFor(X, <http://www.Department0.University0.edu>),
  ub:name(X, Y1),
  ub:emailAddress(X, Y2),
  ub:telephone(X, Y3).

% Query5
% This query assumes subClassOf relationship between Person and its subclasses
% and subPropertyOf relationship between memberOf and its subproperties.
% Moreover, class Person features a deep and wide hierarchy.
[Q5] ?(X) :-
  ub:Person(X),
  ub:memberOf(X, <http://www.Department0.University0.edu>).


% Query6
% This query queries about only one class. But it assumes both the explicit
% subClassOf relationship between UndergraduateStudent and Student and the
% implicit one between GraduateStudent and Student. In addition, it has large
% input and low selectivity.
[Q6] ?(X) :- ub:Student(X).


% Query7
% This query is similar to Query 6 in terms of class Student but it increases in the
% number of classes and properties and its selectivity is high.
[Q7] ?(X, Y) :- 
  ub:Student(X),
  ub:Course(Y),
  ub:takesCourse(X, Y),
  ub:teacherOf(<http://www.Department0.University0.edu/AssociateProfessor0>, Y).


% Query8
% This query is further more complex than Query 7 by including one more property.
[Q8] ?(X, Y, Z) :-
  ub:Student(X),
  ub:Department(Y),
  ub:memberOf(X, Y),
  ub:subOrganizationOf(Y, <http://www.University0.edu>),
  ub:emailAddress(X, Z).


% Query9
% Besides the aforementioned features of class Student and the wide hierarchy of
% class Faculty, like Query 2, this query is characterized by the most classes and
% properties in the query set and there is a triangular pattern of relationships.
[Q9] ?(X, Y, Z) :-
  ub:Student(X),
  ub:Faculty(Y),
  ub:Course(Z),
  ub:advisor(X, Y),
  ub:teacherOf(Y, Z),
  ub:takesCourse(X, Z).


% Query10
% This query differs from Query 6, 7, 8 and 9 in that it only requires the
% (implicit) subClassOf relationship between GraduateStudent and Student, i.e., 
%subClassOf rela-tionship between UndergraduateStudent and Student does not add
% to the results.
[Q10] ?(X) :-
  ub:Student(X),
  ub:takesCourse(X, <http://www.Department0.University0.edu/GraduateCourse0>).


% Query11
% Query 11, 12 and 13 are intended to verify the presence of certain OWL reasoning
% capabilities in the system. In this query, property subOrganizationOf is defined
% as transitive. Since in the benchmark data, instances of ResearchGroup are stated
% as a sub-organization of a Department individual and the later suborganization of 
% a University individual, inference about the subOrgnizationOf relationship between
% instances of ResearchGroup and University is required to answer this query. 
% Additionally, its input is small.
[Q11] ?(X) :-
  ub:ResearchGroup(X),
  ub:subOrganizationOf(X, <http://www.University0.edu>).


% Query12
% The benchmark data do not produce any instances of class Chair. Instead, each
% Department individual is linked to the chair professor of that department by 
% property headOf. Hence this query requires realization, i.e., inference that
% that professor is an instance of class Chair because he or she is the head of a
% department. Input of this query is small as well.
[Q12] ?(X, Y) :-
  ub:Chair(X),
  ub:Department(Y),
  ub:worksFor(X, Y),
  ub:subOrganizationOf(Y, <http://www.University0.edu>).


% Query13
% Property hasAlumnus is defined in the benchmark ontology as the inverse of
% property degreeFrom, which has three subproperties: undergraduateDegreeFrom, 
% mastersDegreeFrom, and doctoralDegreeFrom. The benchmark data state a person as
% an alumnus of a university using one of these three subproperties instead of
% hasAlumnus. Therefore, this query assumes subPropertyOf relationships between 
% degreeFrom and its subproperties, and also requires inference about inverseOf.
[Q13] ?(X) :-
  ub:Person(X),
  ub:hasAlumnus(<http://www.University0.edu>, X).


% Query14
% This query is the simplest in the test set. This query represents those with large input and low selectivity and does not assume any hierarchy information or inference.
[Q14] ?(X) :- 
  ub:UndergraduateStudent(X).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LUBM EX QUERIES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[Q15] ?(X,Z) :- ub:Student(X), ub:takesCourse(X,Y), ub:Subj1Course(Y), ub:teacherOf(Z,Y), ub:Professor(Z), ub:headOf(Z,W), ub:Department(W), ub:memberOf(X,W).
[Q16] ?(X) :- ub:Faculty(X), ub:degreeFrom(X,Y), ub:University(Y), ub:subOrganizationOf(Z,Y), ub:Department(Z), ub:memberOf(X,Z).
[Q17] ?(X,Y) :- ub:Professor(Z), ub:memberOf(Z,X), ub:Subj3Department(X), ub:publicationAuthor(W,Z), ub:Professor(V), ub:memberOf(V,Y), ub:Subj4Department(Y), ub:publicationAuthor(W,V).
[Q18] ?(X,Y) :- ub:Department(X), ub:memberOf(Z,X), ub:Student(Z), ub:takesCourse(Z,V), ub:teacherOf(W,V), ub:Professor(W), ub:memberOf(W,Y), ub:Department(Y).
[Q19] ?(X) :- ub:Person(X), ub:worksFor(X,Y), ub:Department(Y), ub:takesCourse(X,Z), ub:Course(Z).
[Q20] ?(X) :- ub:Student(X), ub:publicationAuthor(Y,X), ub:Publication(Y), ub:teachingAssistantOf(X,Z), ub:Course(Z).

